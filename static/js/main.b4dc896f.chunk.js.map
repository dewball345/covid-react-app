{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","onSubmit","bind","state","tweet","status","model","didLoadOnce","word_index","a","this","fetch","json","tf","setState","event","preventDefault","input","word","n","split","map","element","undefined","length","padding","Array","i","concat","convert_to_tensors","maxIndex","arr","arrindex","index","indexOfMax","predict","dataSync","Container","className","style","minHeight","maxWidth","Card","borderRadius","Header","borderTopLeftRadius","borderTopRightRadius","color","Title","Subtitle","fontWeight","Body","Form","Group","Label","Control","type","placeholder","onChange","e","target","value","Button","variant","Footer","borderBottomLeftRadius","borderBottomRightRadius","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4dc896f.chunk.js","sourcesContent":["import {Form, Container, Button, Card} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as tf from '@tensorflow/tfjs';\nimport React from 'react';\n// import {word_index} from 'https://raw.githubusercontent.com/dewball345/covid_text_sentiment_analysis/main/word_index.js';\n\n\n\nfunction convert_to_tensors(word, word_index){\n  word = word.split(\" \")\n  word = word.map(element => {\n    if(word_index[element] !== undefined){\n      return word_index[element]\n    } else {\n      return word_index[1]\n    }\n  });\n  let n = 64-word.length;\n  let padding = new Array(n); for (let i=0; i<n; ++i) padding[i] = 0;\n  word = padding.concat(word)\n  word = tf.tensor2d([word], [1, word.length])\n  return word;\n}\n\nfunction indexOfMax(arr) {\n  if(arr.length === 0){\n    return -1\n  }\n  let arrindex = 0\n  for(let index = 0; index < arr.length; index++ ){\n    if(arr[index] > arr[arrindex]){\n      arrindex = index\n    } \n  }\n\n  return arrindex\n}\n\nclass App extends React.Component{\n\n  constructor(){\n    super()\n    this.onSubmit = this.onSubmit.bind(this)\n    this.state = {\n      tweet: \"\",\n      status: \"\",\n      model:null,\n      didLoadOnce: false,\n      word_index: {}\n    }\n  }\n\n  async componentDidMount(){\n    \n    // let json = JSON.parse('./tfjs_covid_text_class/model.json')\n    // console.log(json)\n    if(!this.state.didLoadOnce){\n        let word_index = await fetch('https://raw.githubusercontent.com/dewball345/covid-text-analysis-2/main/word_index.json')\n        word_index = await word_index.json();\n        const model = await tf.loadLayersModel(\"https://raw.githubusercontent.com/dewball345/covid-text-analysis-2/main/model.json\")\n        // console.log(model.summary())\n        this.setState({\n          model: model,\n          didLoadOnce:true,\n          word_index:word_index\n        })\n    }\n  }\n\n  onSubmit(event){\n    event.preventDefault();\n    let input = convert_to_tensors(this.state.tweet, this.state.word_index);\n    let classes = [\"Sad\", \"Happy\", \"Little Sad\", \"Neutral\", \"Little Happy\"]\n    let prediction = Array(this.state.model.predict(input).dataSync())[0];\n    let maxIndex = indexOfMax(prediction)\n    this.setState({\n      status:classes[maxIndex]\n    });\n    \n  }\n\n  render(){\n      return (\n        <Container className=\"d-flex\" style={{\n          minHeight:\"100vh\",\n        }}>\n          <Container className = \"align-self-center\" style={{\n            maxWidth:\"500px\"\n          }}>\n            <Card className=\"shadow-lg\" style={{\n              borderRadius: \"20px\"\n            }}>\n              <Card.Header className=\"bg-primary\" style={{\n                borderTopLeftRadius: \"20px\",\n                borderTopRightRadius: \"20px\",\n                color: \"white\"\n              }}>\n                <Card.Title>\n                    Covid-19 sentiment analysis\n                </Card.Title>\n                <Card.Subtitle style={{\n                  fontWeight: 300\n                }}>\n                    Enter a tweet, and I will try to guess how positive/negative it is...\n                </Card.Subtitle>\n              </Card.Header>\n              <Card.Body>\n                <Form onSubmit = {this.onSubmit}>\n                  <Form.Group>\n                    <Form.Label>\n                      <h5>\n                        Enter a tweet\n                      </h5>\n                    </Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter text\" onChange={(e) => {\n                      this.setState({\n                        tweet: e.target.value\n                      });\n                    }}/>\n                  </Form.Group>\n\n                  <Button className=\"btn-sm\" variant=\"primary\" type=\"submit\">\n                      Submit\n                  </Button>\n                </Form>\n              </Card.Body>\n              <Card.Footer className=\"bg-primary\" style={{\n                borderBottomLeftRadius: \"20px\",\n                borderBottomRightRadius: \"20px\",\n                color: \"white\"\n              }}>\n                <h4>Your tweet was: {this.state.status}</h4>\n              </Card.Footer>\n            </Card>\n          </Container>\n        </Container>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}